
* question

Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0


* mysolution
- 二分查找时需要注意所查找的值是否在范围内

#+begin_src c++
class Solution
{
public:
	int searchInsert(vector<int>& nums, int target)
	{
		if (nums.empty())
		{
			return 0;
		}

		if (nums.back() == target)
		{
			return nums.size() - 1;
		}
		else if (nums.back() < target)
		{
			return nums.size();
		}
		else if (nums.front() > target)
		{
			return 0;
		}
		
		int left = 0;
		int right = nums.size() - 1;

		int insertDest = 0;

		while (left < right)
		{
			insertDest = (right + left) / 2;
			if (nums[insertDest] == target)
			{
				break;
			}
			else if (nums[insertDest] > target)
			{
				left = insertDest;
			}
			else
			{
				right = insertDest;
			}
		}

		return insertDest;
	}
};
#+end_src



