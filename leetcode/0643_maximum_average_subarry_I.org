
* question
Given an array consisting of n integers, find the contiguous subarray
of given length k that has the maximum average value. And you need to
output the maximum average value.

- Example 1:
Input: [1,12,-5,-6,50,3], k = 4
Output: 12.75
Explanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75
- Note:
1 <= k <= n <= 30,000.
Elements of the given array will be in the range [-10,000, 10,000].

** tips
- 注意有符号和无符号数之间的计算，会强制将整数转换为无符号数

* my solution

#+BEGIN_SRC c++
class Solution_0643
{
public:
  double findMaxAverage(vector<int>& nums, int k)
  {
    double ans = -10000;
    double temp = 0.0;

    for (int i = 0; i < (int)nums.size(); ++i)
    {
      temp += nums[i];

      if (k-i <= 0)
      {
        temp -= nums[i-k];
      }

      if (k-i <= 1)
      {
        ans = std::max(ans, temp/k);
      }
    }
    return ans;
  }
};
#+END_SRC


* leetcode solution

** sliding window
#+BEGIN_SRC c++
class Solution {
public:
    double findMaxAverage(vector<int>& nums, int k) {
        double max_res = 0;
        for(int i = 0; i < k; ++i)
            max_res += nums[i];
        double cur_res = max_res;
        for(int i = k; i < nums.size(); ++i) {
            cur_res = cur_res - nums[i - k] + nums[i];
            max_res = max(max_res, cur_res);
        }
        return max_res / k;
    }
};
#+END_SRC

** cumulative sum
#+BEGIN_SRC java
public class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int[] sum = new int[nums.length];
        sum[0] = nums[0];
        for (int i = 1; i < nums.length; i++)
        sum[i] = sum[i - 1] + nums[i];
        double res = sum[k - 1] * 1.0 / k;
        for (int i = k; i < nums.length; i++) {
            res = Math.max(res, (sum[i] - sum[i - k]) * 1.0 / k);
        }
        return res;
    }
}
#+END_SRC

